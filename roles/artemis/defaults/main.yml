---
artemis_version: # Set to version or local path to war file for non-docker installation and docker tag for docker version
is_testserver: false
is_multinode_install: false

artemis_server_url: https://artemis.tum.de
artemis_server_port: 8080

use_docker: false
artemis_node_count: 1

download_artemis_application: false # Set to true to update the artemis app version
setup_system: false # Set to true to perform the overall system setup (users, systemd, ...)
restart_artemis: false # Set to true to restart artemis. Needed if download_artemis_application is set.
update_artemis_config: false # Set to true to update the artemis configuration in application-prod.yml.

##############################################################################
# Artemis Linux Users
##############################################################################

# Artemis service user configuration
artemis_user_name: artemis
artemis_user_group: artemis
artemis_user_uid: 1337
artemis_user_gid: 1337

# Artemis deployment user configuration
artemis_create_deployment_user: false
artemis_deployment_user_name: deploymentuser
artemis_deployment_user_uid: 1338
artemis_deployment_user_public_key: ""
artemis_deployment_user_comment: "User to deploy artemis to this host"
artemis_deployment_full_sudo: false

##############################################################################
# Java Setup
##############################################################################

openjdk_version: 21

##############################################################################
# Artemis
##############################################################################

artemis_internal_admin_user: artemis_admin
artemis_internal_admin_password:
artemis_jhipster_jwt: #FIXME
artemis_jhipster_registry_password: #FIXME Multinode

artemis_email: artemis.in@tum.de
artemis_operator_name: "Anonymous University"
artemis_operator_admin_name: "Anonymous University Admin"
artemis_notification_from: "Artemis Notification"

artemis_telemetry_enabled: true
artemis_send_admin_details: true
artemis_telemetry_destination: "https://telemetry.artemis.cit.tum.de"

artemis_working_directory: "/opt/artemis"
artemis_repo_basepath: "."

artemis_legal_path: /opt/artemis/legal
artemis_data_export_path: /opt/artemis/data-exports
artemis_tmp_directory: # Defaults to system tmp dir

# the following two values must be cron expressions
artemis_scheduling_data_export_creation_time: 0 0 4 * * * # every day at 4 am
artemis_scheduling_programming_exercises_cleanup_time: 0 0 3 * * * # every day at 3 am
artemis_scheduling_continuous_plagiarism_control_trigger_time: 0 0 4 * * * # every day at 4 am

artemis_data_export_days_between_data_exports: 14

artemis_plagiarism_checks_plagiarism_results_limit: 100

artemis_ssh_key_path: /opt/keys
artemis_build_version: "{{ artemis_version }}"
artemis_war_url: "https://github.com/ls1intum/Artemis/releases/download/{{ artemis_version }}/Artemis.war"

artemis_branch: develop

artemis_system_ram_proportion: 0.8 # How much % of the system RAM to allocate to the Artemis service (Default here: 80%)

artemis_database_type: mysql # The type of the database used. Used in the JDBC URL (Default of Artemis is currently mysql)
artemis_database_host: localhost
artemis_database_port: 3306 # The port that the database is reachable on (MySQL default: 3306)
artemis_database_dbname: artemis
artemis_database_username: artemis
artemis_database_password: #FIXME
artemis_database_encoding: utf8mb4 # MySQL specific default encoding
artemis_database_collation: utf8mb4_unicode_ci # MySQL specific default collation
# apollon_url: https://apollon.ase.in.tum.de
artemis_bcrypt_salt_rounds: 11

artemis_account_login_info: "TUM"

shared_monitoring_host_v4:
artemis_version_control_default_branch_name: main

enable_science_event_logging: false

push_notification_relay: "https://hermes.artemis.cit.tum.de"

sentry:
  dsn:
  enable_db_tracing: false
# send_default_pii: false
# traces_sample_rate: 0.0
# sentry.environment: 'env' # optional since we do set default values with the below logic
"{% if sentry.environment is defined and sentry.environment|length %}  environment: {{ sentry.environment }}{% elif is_testserver is defined and is_testserver is sameas true %}  environment: test{% elif is_testserver is defined and is_testserver is sameas false %}  environment: prod{% else %}  environment: local{% endif %}"

#theia:
#  portal_url: https://theia-yannik.k8s.ase.cit.tum.de
#  images:
#    java:
#      Java-17: "java-17-latest"
#    c:
#      C: "c-latest"
#    javascript:
#      Javascript: "javascript-latest"
#    ocaml:
#      Ocaml: "ocaml-latest"
#    python:
#      Python: "python-latest"
#    rust:
#      Rust: "rust-latest"

# If the password of some users is stored externally, you need to provide a name and the reset links. They will be displayed as a hint in the reset form of Artemis.
# You need to at least provide the provider and the English reset link.
artemis_external_password_provider: TUMonline
artemis_external_password_reset_link_en: "https://campus.tum.de/tumonline/co_loc_password_reset.main#lang=en"
artemis_external_password_reset_link_de: "https://campus.tum.de/tumonline/co_loc_password_reset.main#lang=de"

artemis_passkey_enabled: false

#ldap:
#  url: "ldaps://iauth.tum.de:636"
#  user_dn: "cn=TUINI01-Artemis,ou=bindDNs,ou=iauth,dc=tum,dc=de"
#  base: "ou=users,ou=data,ou=prod,ou=iauth,dc=tum,dc=de"
#  password:
#
# localvc:
#   url:
#   repo_storage_base_path:
#   use_version_control_access_token: false
#   ssh_key_path: /opt/artemis/ssh-keys # Key path for the SSH host keys
# # Build Agent specific configuration: The build agent needs some sort of authentication method in order to perform clone operations.
# # This can either be: SSH, spearate credentails, or the artemis admin user
#   build_agent_use_ssh: # Setting whether SSH should be used.
#   ssh_url: # URL template for SSH clone operations. (e.g. ssh://git@hostname.artemis.cit.tum.de:7921/)
#   build_agent_git_credentials: # Config for separate build agent git credentails
#     user:
#     password:
#   user: # An artemis admin user for the local version control system
#   password: # The password of the artemis admin user for the local version control system
#
#continuous_integration:
#
#  jenkins:
#    url:
#    user:
#    password:
#    secret_push_token:
#    vcs_credentials:
#    artemis_auth_token_key:
#    artemis_auth_token_value:
#
#  localci:
#    is_core_node: true
#    is_build_agent: true
#    concurrent_build_size: 2
#    thread_pool_size: 2
#    proxy:
#      http_proxy: "http://proxy:8080"
#      https_proxy: "http://proxy:8080"
#      no_proxy: "localhost"
#    image_cleanup:
#      expiry_days: 3
#      schedule_time: "0 0 4 * * *"
#
#athena:
#  url:
#  secret:
#  modules:
#    text:
#    programming:
#
#
#lti:
#  oauth_secret:
#
#mail:
#  hostname:
#  port:
#  username:
#  password:
#  protocol:
#  ssl_trust:
#
#post_hog:
#  host:
#  token:
#
#licenses:
#  matlab: "28000@mlm1.rbg.tum.de"
#
###############################################################################
## Message Broker
###############################################################################
#
#broker:  #FIXME Multinode
#  url:
#  user:
#  password:
#
#registry:  #FIXME Multinode
#  url:

# Define node local hazelcast_address - Uses wireguard net by default
hazelcast_address: "{% if is_multinode_install is defined and is_multinode_install | bool == true and not use_docker %}[{{ wireguard_interface_address }}]{% endif %}"

artemis_eureka_urls: "{% if registry.url is defined and registry.url is not none %}http://admin:${jhipster.registry.password}@{{ registry.url }}:8761/eureka/{% endif
  %}"
artemis_eureka_instance_id: "{{ node_id }}"

node_short_name: unnamed-artemis-node
node_display_name: Unnamed Artemis Node

##############################################################################
# Iris Configuration
##############################################################################
#iris:
#  url:
#  secret:

##############################################################################
# Aeolus Configuration
##############################################################################
#aeolus:
#  url:
#  token:

##############################################################################
# Atlas Configuration
##############################################################################
#atlas:
# More configuration options will be added in the future.

##############################################################################
# Hyperion / Spring AI (Azure OpenAI) Configuration
##############################################################################
# Define Spring AI configuration once under spring_ai.azure_openai.
# Hyperion is enabled via the application property artemis.hyperion.enabled,
# controlled here with the variable 'artemis_hyperion_enabled'.
# Example Spring AI configuration:
#
#spring_ai:
#  azure_openai:
#    api_key: ""
#    endpoint: "https://your-resource-name.openai.azure.com/"
#    deployment_name: "gpt-5-mini"
#    temperature: 1.0

artemis_hyperion_enabled: false

##############################################################################
# CORS Configuration
##############################################################################
#artemis_CORS_allowed_origins: "*"

##############################################################################
# Helios Configuration
##############################################################################
#helios:
#  environment_name: artemis.tum.de
#  endpoints:
#    - url: "https://helios.aet.cit.tum.de/api/environments/status"
#      secret_key: ""
#    - url: "https://helios-staging.aet.cit.tum.de/api/environments/status"
#      secret_key: ""

##############################################################################
# Sharing Configuration
##############################################################################
#sharing:
#  url: "https://dev-exchange.codeability-austria.uibk.ac.at/"
#  apikey: ""
#  actionname: "Export to Artemis@testInstance"

##############################################################################
# Auto-generated Variables - No not alter!
##############################################################################

artemis_computed_is_core_node: "{{ not (continuous_integration.localci is defined and continuous_integration.localci is not none) or (continuous_integration.localci.is_core_node
  is defined and continuous_integration.localci.is_core_node) }}"

# Compute Spring Profiles from set variables
artemis_spring_profile_env: "prod"
artemis_spring_profile_ldap: "{% if ldap.password is defined and ldap.password is not none %},ldap{% endif %}"
artemis_spring_profile_version_control: "{% if version_control.localvc is defined and version_control.localvc is not none %},localvc{% endif
  %}"
artemis_spring_profile_continuous_integration: "{% if continuous_integration.jenkins
  is defined and continuous_integration.jenkins is not none %},jenkins{% elif continuous_integration.localci is defined and continuous_integration.localci is not
  none %},localci{% elif continuous_integration.gitlabci is defined and continuous_integration.gitlabci is not none %},gitlabci{% endif %}"
artemis_spring_profile_athena: "{% if athena is defined and athena is not none %},athena{% endif %}"
artemis_spring_profile_apollon: "{% if apollon_url is defined and apollon_url is not none %},apollon{% endif %}"
artemis_spring_profile_scheduling: "{% if node_id is defined and node_id == 1 %},scheduling{% endif %}"
artemis_spring_profile_docker: "{% if use_docker %},docker{% endif %}"
artemis_spring_profile_iris: "{% if iris is defined and iris is not none %},iris{% endif %}"
artemis_spring_profile_theia: "{% if theia is defined and theia is not none %},theia{% endif %}"
artemis_spring_profile_aeolus: "{% if aeolus is defined and aeolus is not none %},aeolus{% endif %}"
artemis_spring_profile_atlas: "{% if atlas is defined %},atlas{% endif %}" # TODO: Add and atlas is not none check as soon as the additional configuration options are added
artemis_spring_profile_lti: "{% if lti.oauth_secret is defined and lti.oauth_secret is not none %},lti{% endif %}"
artemis_spring_profile_sharing: "{% if sharing is defined and sharing is not none %},sharing{% endif %}"

artemis_spring_profile_core: "{% if artemis_computed_is_core_node %},core{{ artemis_spring_profile_ldap }}{{ artemis_spring_profile_version_control
  }}{{ artemis_spring_profile_continuous_integration }}{{ artemis_spring_profile_athena }}{{ artemis_spring_profile_apollon }}{{ artemis_spring_profile_scheduling }}{{ artemis_spring_profile_docker
  }}{{ artemis_spring_profile_iris }}{{ artemis_spring_profile_theia }}{{ artemis_spring_profile_aeolus }}{{ artemis_spring_profile_atlas }}{{ artemis_spring_profile_lti
  }}{{ artemis_spring_profile_sharing }}{% endif %}"
artemis_spring_profile_buildagent: "{% if continuous_integration.localci is defined and continuous_integration.localci is not none %}{% if continuous_integration.localci.is_build_agent
  is defined and continuous_integration.localci.is_build_agent is not none and continuous_integration.localci.is_build_agent %},buildagent{% endif %}{% endif %}"

artemis_spring_profiles: "{{ artemis_spring_profile_env }}{{ artemis_spring_profile_buildagent }}{{ artemis_spring_profile_core }}"
