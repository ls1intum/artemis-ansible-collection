---
- name: Check Artemis version is set
  fail:
    msg: "No Artemis version is set!"
  when: artemis_version is undefined or artemis_version is none or artemis_version == ""

- name: Check restart_artemis is set.
  fail:
    msg: "restart_artemis has to be set when a new artemis version should be released"
  when: not (restart_artemis | bool)

- name: Check if version matches release pattern
  set_fact:
    is_release: "{{ artemis_version is match('^\\d+\\.\\d+\\.\\d+$') }}"

- name: Copy local Artemis.war to {{ artemis_working_directory }}
  become: true
  ansible.posix.synchronize:
    src: "{{ artemis_version }}"
    dest: "{{ artemis_working_directory }}/artemis.war.new"
    mode: push
    archive: true
    owner: false
    group: false
  when: not (is_release | bool)

- name: Set correct ownership and permissions on artemis.war.new
  become: true
  file:
    path: "{{ artemis_working_directory }}/artemis.war.new"
    owner: "{{ artemis_user_name }}"
    group: "{{ artemis_user_group }}"
    mode: "644"
  when: not (is_release | bool)

- name: Download Artemis.war to {{ artemis_working_directory }}
  become: true
  get_url:
    url: "{{ artemis_war_url }}"
    dest: "{{ artemis_working_directory }}/artemis.war.new"
    owner: "{{ artemis_user_name }}"
    group: "{{ artemis_user_group }}"
    mode: "644"
    force: true
  when: is_release | bool
