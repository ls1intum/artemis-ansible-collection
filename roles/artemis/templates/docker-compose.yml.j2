# ----------------------------------------------------------------------------------------------------------------------
# Artemis Prod Setup Template
# ----------------------------------------------------------------------------------------------------------------------

services:
  artemis-app:
    extends:
      file: ./Artemis/src/main/docker/artemis/artemis.yml
      service: artemis-app
    depends_on:
      {{ artemis_database_type }}:
        condition: service_healthy
    restart: on-failure:3
    volumes:
      - /opt/artemis/config:/opt/artemis/config
      - artemis-data:/opt/artemis/data
      - /opt/artemis/logs/artemis.log:{{ artemis_working_directory }}/artemis.log
    environment:
      _JAVA_OPTIONS: -Xmx3g -Xms1g
      SPRING_PROFILES_ACTIVE: artemis,scheduling,athene,prod,docker

  artemis-nginx:
    extends:
      file: ./Artmis/src/main/docker/artemis-prod-postgres.yml
      service: artemis-nginx
    volumes:
      - {{ proxy_ssl_certificate_path }}:/certs/fullchain.pem:ro
      - {{ proxy_ssl_certificate_key_path }}:/certs/priv_key.pem:ro

{% if artemis_database_type == "mysql" %}
  mysql:
    extends:
      file: ./Artemis/src/main/docker/mysql.yml
      service: mysql
    restart: on-failure:3
    environment:
      MYSQL_ROOT_PASSWORD: "{{ artemis_database_password }}"
      MYSQL_USER: "{{ artemis_database_username }}"
      MYSQL_PASSWORD: "{{ artemis_database_password }}"
      MYSQL_DATABASE: "{{ artemis_database_dbname }}"
{% endif %}

{% if artemis_database_type == "postgresql" %}
  postgresql:
    container_name: artemis-postgresql
    image: docker.io/library/postgres:15-alpine
    pull_policy: always
    volumes:
      - artemis-postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "{{ artemis_database_username }}"
      POSTGRES_PASSWORD: "{{ artemis_database_password }}"
      POSTGRES_DB: "{{ artemis_database_dbname }}"
    ports:
      - "5432:5432"
    expose:
      - "5432"
    command: postgres -c max_connections=300 -c shared_buffers=256MB -c timezone='UTC' -c log_statement=all
    healthcheck:
      test: pg_isready
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 30s
    networks:
      - artemis
{% endif %}

networks:
  artemis:
    driver: "bridge"
    name: artemis
volumes:
  artemis-{{ artemis_database_type }}-data:
    name: artemis-{{ artemis_database_type }}-data
  artemis-data:
    name: artemis-data