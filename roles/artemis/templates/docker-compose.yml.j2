# ----------------------------------------------------------------------------------------------------------------------
# Artemis Prod Setup Template
# ----------------------------------------------------------------------------------------------------------------------

services:
  artemis-app:
    extends:
      file: ./artemis.yml
      service: artemis-app
    image: ghcr.io/ls1intum/artemis:$ARTEMIS_TAG
    pull_policy: always
    depends_on:
      {{ artemis_database_type }}:
        condition: service_healthy
    restart: always
    volumes:
      - /opt/artemis/data:/opt/artemis/data
{% if artemis_ssh_key_path is defined and artemis_ssh_key_path is not none and artemis_ssh_key_path != "" %}
      - "{{ artemis_ssh_key_path }}:{{ artemis_ssh_key_path }}"
{% endif %}
    env_file:
      - ../../.env
    environment:
      _JAVA_OPTIONS: -Xmx3g -Xms1g
      SPRING_PROFILES_ACTIVE: "{{ artemis_spring_profiles }}"

  artemis-nginx:
    extends:
      file: ./artemis-prod-mysql.yml
      service: nginx
    restart: always
    volumes:
      - type: bind
        source: "{{ proxy_ssl_certificate_path }}"
        target: "/certs/fullchain.pem"
      - type: bind
        source: "{{ proxy_ssl_certificate_key_path }}"
        target: "/certs/priv_key.pem"

{% if artemis_database_type == "mysql" %}
  mysql:
    extends:
      file: ./artemis-prod-mysql.yml
      service: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "{{ artemis_database_password }}"
      MYSQL_USER: "{{ artemis_database_username }}"
      MYSQL_PASSWORD: "{{ artemis_database_password }}"
      MYSQL_DATABASE: "{{ artemis_database_dbname }}"
{% endif %}

{% if artemis_database_type == "postgresql" %}
  postgresql:
    container_name: artemis-postgresql
    image: docker.io/library/postgres:15-alpine
    pull_policy: always
    volumes:
      - artemis-postgresql-data:/var/lib/postgresql/data
    restart: always
    environment:
      POSTGRES_USER: "{{ artemis_database_username }}"
      POSTGRES_PASSWORD: "{{ artemis_database_password }}"
      POSTGRES_DB: "{{ artemis_database_dbname }}"
    ports:
      - "5432:5432"
    expose:
      - "5432"
    command: postgres -c max_connections=300 -c shared_buffers=256MB -c timezone='UTC' -c log_statement=all
    healthcheck:
      test: pg_isready
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 30s
    networks:
      - artemis
{% endif %}

networks:
  artemis:
    driver: "bridge"
    name: artemis
volumes:
  artemis-{{ artemis_database_type }}-data:
    name: artemis-{{ artemis_database_type }}-data